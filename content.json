{"pages":[{"title":"test","text":"","link":"/test/index.html"},{"title":"zh-cn/test","text":"","link":"/zh-cn/test/index.html"}],"posts":[{"title":"好用的运维相关Python库1：psutil","text":"由于Bash实在太恶心，很多运维工程师开始使用Python代替Bash写各种脚本。 虽然理论上可以用Python调用Bash指令实现各种功能，但是给各种命令写Bash wrapper还要解析输出实在太麻烦。所以我们还是希望用原生Python库来实现各种功能。 今天我推荐一个好用的Python库psutil。 psutil一个能够跨平台使用的库。可以用来获取系统信息（CPU、内存、磁盘、网络）和进程信息。 它可以被用来替代这些UNIX的系统命令：ps, top, lsof, netstat, ifconfig, who, df, kill, free, nice, ionice, iostat, iotop, uptime, pidof, tty, taskset, pmap 下面是一些具体例子： 1&gt;&gt;&gt; import psutil # 加载库 CPU信息CPU占用率 12&gt;&gt;&gt; psutil.cpu_percent(interval=5)12.9 CPU频率 12&gt;&gt;&gt; psutil.cpu_freq()scpufreq(current=2300, min=2300, max=2300) CPU load 12&gt;&gt;&gt; psutil.getloadavg()(2.21044921875, 2.4814453125, 2.74609375) 内存信息内存使用状况 12&gt;&gt;&gt; psutil.virtual_memory()svmem(total=8589934592, available=1664913408, percent=80.6, used=5807058944, free=15069184, active=1651421184, inactive=1649065984, wired=4155637760) 磁盘磁盘分区信息 12&gt;&gt;&gt; psutil.disk_partitions()[sdiskpart(device=&apos;/dev/disk1s5&apos;, mountpoint=&apos;/&apos;, fstype=&apos;apfs&apos;, opts=&apos;ro,local,rootfs,dovolfs,journaled,multilabel&apos;, maxfile=255, maxpath=1024), ...] 磁盘占用率 12&gt;&gt;&gt; psutil.disk_usage(&apos;/&apos;)sdiskusage(total=250685575168, used=11233398784, free=14531440640, percent=43.6) 磁盘IO 12&gt;&gt;&gt; psutil.disk_io_counters()sdiskio(read_count=190236826, write_count=110716593, read_bytes=11349786423296, write_bytes=9505852936192, read_time=165443373, write_time=100234117) 网络网络连接 (netstat) 1234567&gt;&gt;&gt; import psutil&gt;&gt;&gt; psutil.net_connections()[pconn(fd=115, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=addr(ip=&apos;10.0.0.1&apos;, port=48776), raddr=addr(ip=&apos;93.186.135.91&apos;, port=80), status=&apos;ESTABLISHED&apos;, pid=1254), pconn(fd=117, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=addr(ip=&apos;10.0.0.1&apos;, port=43761), raddr=addr(ip=&apos;72.14.234.100&apos;, port=80), status=&apos;CLOSING&apos;, pid=2987), pconn(fd=-1, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=addr(ip=&apos;10.0.0.1&apos;, port=60759), raddr=addr(ip=&apos;72.14.234.104&apos;, port=80), status=&apos;ESTABLISHED&apos;, pid=None), pconn(fd=-1, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=addr(ip=&apos;10.0.0.1&apos;, port=51314), raddr=addr(ip=&apos;72.14.234.83&apos;, port=443), status=&apos;SYN_SENT&apos;, pid=None) ...] 网络接口（ifconfig) 1234567&gt;&gt;&gt; psutil.net_if_addrs(){&apos;lo&apos;: [snicaddr(family=&lt;AddressFamily.AF_INET: 2&gt;, address=&apos;127.0.0.1&apos;, netmask=&apos;255.0.0.0&apos;, broadcast=&apos;127.0.0.1&apos;, ptp=None), snicaddr(family=&lt;AddressFamily.AF_INET6: 10&gt;, address=&apos;::1&apos;, netmask=&apos;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&apos;, broadcast=None, ptp=None), snicaddr(family=&lt;AddressFamily.AF_LINK: 17&gt;, address=&apos;00:00:00:00:00:00&apos;, netmask=None, broadcast=&apos;00:00:00:00:00:00&apos;, ptp=None)], &apos;wlan0&apos;: [snicaddr(family=&lt;AddressFamily.AF_INET: 2&gt;, address=&apos;192.168.1.3&apos;, netmask=&apos;255.255.255.0&apos;, broadcast=&apos;192.168.1.255&apos;, ptp=None), snicaddr(family=&lt;AddressFamily.AF_INET6: 10&gt;, address=&apos;fe80::c685:8ff:fe45:641%wlan0&apos;, netmask=&apos;ffff:ffff:ffff:ffff::&apos;, broadcast=None, ptp=None), snicaddr(family=&lt;AddressFamily.AF_LINK: 17&gt;, address=&apos;c4:85:08:45:06:41&apos;, netmask=None, broadcast=&apos;ff:ff:ff:ff:ff:ff&apos;, ptp=None)]} 其它系统信息电池 12&gt;&gt;&gt; psutil.sensors_battery()sbattery(percent=93, secsleft=15420, power_plugged=False) 当前用户 12&gt;&gt;&gt; psutil.users()[suser(name=&apos;myname&apos;, terminal=&apos;console&apos;, host=None, started=1604809088.0, pid=180), suser(name=&apos;yuliji&apos;, terminal=&apos;ttys012&apos;, host=None, started=1615375616.0, pid=13894)] 进程信息PID 12&gt;&gt;&gt; psutil.pids()[1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, ..., 32498] 所有进程 123456&gt;&gt;&gt; for proc in psutil.process_iter([&apos;pid&apos;, &apos;name&apos;, &apos;username&apos;]):... print(proc.info)...{&apos;name&apos;: &apos;systemd&apos;, &apos;pid&apos;: 1, &apos;username&apos;: &apos;root&apos;}{&apos;name&apos;: &apos;kthreadd&apos;, &apos;pid&apos;: 2, &apos;username&apos;: &apos;root&apos;}{&apos;name&apos;: &apos;ksoftirqd/0&apos;, &apos;pid&apos;: 3, &apos;username&apos;: &apos;root&apos;} 详细文档，请参考： https://psutil.readthedocs.io/en/latest/","link":"/2021/03/21/zh-cn/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3Python%E5%BA%931%EF%BC%9Apsutil/"},{"title":"好用的运维相关Python库2：IPy","text":"今天介绍一个很好用的运维相关Python库IPy。这个库提供了很多强大的处理IP地址相关的功能。 其中最重要的IP 类可以解析和处理各种IPv4和IPv6地址 比如，解析CIDR网址 123456789&gt;&gt;&gt; from IPy import IP&gt;&gt;&gt; ip = IP(&apos;127.0.0.0/30&apos;)&gt;&gt;&gt; for x in ip:... print(x)...127.0.0.0127.0.0.1127.0.0.2127.0.0.3 支持IPv4和IPv6地址格式 12345678910111213141516171819202122&gt;&gt;&gt; IP(&apos;10.0.0.0/8&apos;).version()4&gt;&gt;&gt; IP(&apos;::1&apos;).version()6&gt;&gt;&gt; print(IP(0x7f000001))127.0.0.1&gt;&gt;&gt; print(IP(&apos;0x7f000001&apos;))127.0.0.1&gt;&gt;&gt; print(IP(&apos;127.0.0.1&apos;))127.0.0.1&gt;&gt;&gt; print(IP(&apos;10&apos;))10.0.0.0&gt;&gt;&gt; print(IP(&apos;1080:0:0:0:8:800:200C:417A&apos;))1080::8:800:200c:417a&gt;&gt;&gt; print(IP(&apos;1080::8:800:200C:417A&apos;))1080::8:800:200c:417a&gt;&gt;&gt; print(IP(&apos;::1&apos;))::1&gt;&gt;&gt; print(IP(&apos;::13.1.68.3&apos;))::d01:4403 支持各种格式的子网掩码 123456&gt;&gt;&gt; print(IP(&apos;127.0.0.0/8&apos;))127.0.0.0/8&gt;&gt;&gt; print(IP(&apos;127.0.0.0/255.0.0.0&apos;))127.0.0.0/8&gt;&gt;&gt; print(IP(&apos;127.0.0.0-127.255.255.255&apos;))127.0.0.0/8 把IP地址转换成各种格式的字符串 123456789101112131415161718192021&gt;&gt;&gt; IP(&apos;10.0.0.0/32&apos;).strNormal()&apos;10.0.0.0&apos;&gt;&gt;&gt; IP(&apos;10.0.0.0/24&apos;).strNormal()&apos;10.0.0.0/24&apos;&gt;&gt;&gt; IP(&apos;10.0.0.0/24&apos;).strNormal(0)&apos;10.0.0.0&apos;&gt;&gt;&gt; IP(&apos;10.0.0.0/24&apos;).strNormal(1)&apos;10.0.0.0/24&apos;&gt;&gt;&gt; IP(&apos;10.0.0.0/24&apos;).strNormal(2)&apos;10.0.0.0/255.255.255.0&apos;&gt;&gt;&gt; IP(&apos;10.0.0.0/24&apos;).strNormal(3)&apos;10.0.0.0-10.0.0.255&apos;&gt;&gt;&gt; ip = IP(&apos;10.0.0.0&apos;)&gt;&gt;&gt; print(ip)10.0.0.0&gt;&gt;&gt; ip.NoPrefixForSingleIp = None&gt;&gt;&gt; print(ip)10.0.0.0/32&gt;&gt;&gt; ip.WantPrefixLen = 3&gt;&gt;&gt; print(ip)10.0.0.0-10.0.0.0 更详细信息可以查阅https://github.com/autocracy/python-ipy/","link":"/2021/03/21/zh-cn/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3Python%E5%BA%932%EF%BC%9AIPy/"}],"tags":[],"categories":[]}